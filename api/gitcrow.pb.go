// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitcrow.proto

package api_pb // import "github.com/taxio/gitcrow/api"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Repository struct {
	Owner                string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Repo                 string                `protobuf:"bytes,2,opt,name=repo,proto3" json:"repo,omitempty"`
	Tag                  *wrappers.StringValue `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Repository) Reset()         { *m = Repository{} }
func (m *Repository) String() string { return proto.CompactTextString(m) }
func (*Repository) ProtoMessage()    {}
func (*Repository) Descriptor() ([]byte, []int) {
	return fileDescriptor_gitcrow_8b621418de9b2e1a, []int{0}
}
func (m *Repository) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Repository.Unmarshal(m, b)
}
func (m *Repository) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Repository.Marshal(b, m, deterministic)
}
func (dst *Repository) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Repository.Merge(dst, src)
}
func (m *Repository) XXX_Size() int {
	return xxx_messageInfo_Repository.Size(m)
}
func (m *Repository) XXX_DiscardUnknown() {
	xxx_messageInfo_Repository.DiscardUnknown(m)
}

var xxx_messageInfo_Repository proto.InternalMessageInfo

func (m *Repository) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Repository) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Repository) GetTag() *wrappers.StringValue {
	if m != nil {
		return m.Tag
	}
	return nil
}

type CloneRepositoriesRequest struct {
	Username             string        `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccessToken          string        `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ProjectName          string        `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Repos                []*Repository `protobuf:"bytes,4,rep,name=repos,proto3" json:"repos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CloneRepositoriesRequest) Reset()         { *m = CloneRepositoriesRequest{} }
func (m *CloneRepositoriesRequest) String() string { return proto.CompactTextString(m) }
func (*CloneRepositoriesRequest) ProtoMessage()    {}
func (*CloneRepositoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gitcrow_8b621418de9b2e1a, []int{1}
}
func (m *CloneRepositoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloneRepositoriesRequest.Unmarshal(m, b)
}
func (m *CloneRepositoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloneRepositoriesRequest.Marshal(b, m, deterministic)
}
func (dst *CloneRepositoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneRepositoriesRequest.Merge(dst, src)
}
func (m *CloneRepositoriesRequest) XXX_Size() int {
	return xxx_messageInfo_CloneRepositoriesRequest.Size(m)
}
func (m *CloneRepositoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneRepositoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloneRepositoriesRequest proto.InternalMessageInfo

func (m *CloneRepositoriesRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *CloneRepositoriesRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *CloneRepositoriesRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *CloneRepositoriesRequest) GetRepos() []*Repository {
	if m != nil {
		return m.Repos
	}
	return nil
}

type CloneRepositoriesResponse struct {
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloneRepositoriesResponse) Reset()         { *m = CloneRepositoriesResponse{} }
func (m *CloneRepositoriesResponse) String() string { return proto.CompactTextString(m) }
func (*CloneRepositoriesResponse) ProtoMessage()    {}
func (*CloneRepositoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gitcrow_8b621418de9b2e1a, []int{2}
}
func (m *CloneRepositoriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloneRepositoriesResponse.Unmarshal(m, b)
}
func (m *CloneRepositoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloneRepositoriesResponse.Marshal(b, m, deterministic)
}
func (dst *CloneRepositoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloneRepositoriesResponse.Merge(dst, src)
}
func (m *CloneRepositoriesResponse) XXX_Size() int {
	return xxx_messageInfo_CloneRepositoriesResponse.Size(m)
}
func (m *CloneRepositoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloneRepositoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloneRepositoriesResponse proto.InternalMessageInfo

func (m *CloneRepositoriesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DownloadRepositoriesRequest struct {
	Username             string        `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AccessToken          string        `protobuf:"bytes,2,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	ProjectName          string        `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Repos                []*Repository `protobuf:"bytes,4,rep,name=repos,proto3" json:"repos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DownloadRepositoriesRequest) Reset()         { *m = DownloadRepositoriesRequest{} }
func (m *DownloadRepositoriesRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRepositoriesRequest) ProtoMessage()    {}
func (*DownloadRepositoriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_gitcrow_8b621418de9b2e1a, []int{3}
}
func (m *DownloadRepositoriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadRepositoriesRequest.Unmarshal(m, b)
}
func (m *DownloadRepositoriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadRepositoriesRequest.Marshal(b, m, deterministic)
}
func (dst *DownloadRepositoriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRepositoriesRequest.Merge(dst, src)
}
func (m *DownloadRepositoriesRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadRepositoriesRequest.Size(m)
}
func (m *DownloadRepositoriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRepositoriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRepositoriesRequest proto.InternalMessageInfo

func (m *DownloadRepositoriesRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DownloadRepositoriesRequest) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *DownloadRepositoriesRequest) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *DownloadRepositoriesRequest) GetRepos() []*Repository {
	if m != nil {
		return m.Repos
	}
	return nil
}

type DownloadRepositoriesResponse struct {
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadRepositoriesResponse) Reset()         { *m = DownloadRepositoriesResponse{} }
func (m *DownloadRepositoriesResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadRepositoriesResponse) ProtoMessage()    {}
func (*DownloadRepositoriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_gitcrow_8b621418de9b2e1a, []int{4}
}
func (m *DownloadRepositoriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadRepositoriesResponse.Unmarshal(m, b)
}
func (m *DownloadRepositoriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadRepositoriesResponse.Marshal(b, m, deterministic)
}
func (dst *DownloadRepositoriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRepositoriesResponse.Merge(dst, src)
}
func (m *DownloadRepositoriesResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadRepositoriesResponse.Size(m)
}
func (m *DownloadRepositoriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRepositoriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRepositoriesResponse proto.InternalMessageInfo

func (m *DownloadRepositoriesResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Repository)(nil), "taxio.gitcrow.Repository")
	proto.RegisterType((*CloneRepositoriesRequest)(nil), "taxio.gitcrow.CloneRepositoriesRequest")
	proto.RegisterType((*CloneRepositoriesResponse)(nil), "taxio.gitcrow.CloneRepositoriesResponse")
	proto.RegisterType((*DownloadRepositoriesRequest)(nil), "taxio.gitcrow.DownloadRepositoriesRequest")
	proto.RegisterType((*DownloadRepositoriesResponse)(nil), "taxio.gitcrow.DownloadRepositoriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitcrowServiceClient is the client API for GitcrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitcrowServiceClient interface {
	CloneRepositories(ctx context.Context, in *CloneRepositoriesRequest, opts ...grpc.CallOption) (*CloneRepositoriesResponse, error)
	DownloadRepositories(ctx context.Context, in *DownloadRepositoriesRequest, opts ...grpc.CallOption) (*DownloadRepositoriesResponse, error)
}

type gitcrowServiceClient struct {
	cc *grpc.ClientConn
}

func NewGitcrowServiceClient(cc *grpc.ClientConn) GitcrowServiceClient {
	return &gitcrowServiceClient{cc}
}

func (c *gitcrowServiceClient) CloneRepositories(ctx context.Context, in *CloneRepositoriesRequest, opts ...grpc.CallOption) (*CloneRepositoriesResponse, error) {
	out := new(CloneRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/taxio.gitcrow.GitcrowService/CloneRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitcrowServiceClient) DownloadRepositories(ctx context.Context, in *DownloadRepositoriesRequest, opts ...grpc.CallOption) (*DownloadRepositoriesResponse, error) {
	out := new(DownloadRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/taxio.gitcrow.GitcrowService/DownloadRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitcrowServiceServer is the server API for GitcrowService service.
type GitcrowServiceServer interface {
	CloneRepositories(context.Context, *CloneRepositoriesRequest) (*CloneRepositoriesResponse, error)
	DownloadRepositories(context.Context, *DownloadRepositoriesRequest) (*DownloadRepositoriesResponse, error)
}

func RegisterGitcrowServiceServer(s *grpc.Server, srv GitcrowServiceServer) {
	s.RegisterService(&_GitcrowService_serviceDesc, srv)
}

func _GitcrowService_CloneRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitcrowServiceServer).CloneRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxio.gitcrow.GitcrowService/CloneRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitcrowServiceServer).CloneRepositories(ctx, req.(*CloneRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitcrowService_DownloadRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitcrowServiceServer).DownloadRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taxio.gitcrow.GitcrowService/DownloadRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitcrowServiceServer).DownloadRepositories(ctx, req.(*DownloadRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitcrowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taxio.gitcrow.GitcrowService",
	HandlerType: (*GitcrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloneRepositories",
			Handler:    _GitcrowService_CloneRepositories_Handler,
		},
		{
			MethodName: "DownloadRepositories",
			Handler:    _GitcrowService_DownloadRepositories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gitcrow.proto",
}

func init() { proto.RegisterFile("gitcrow.proto", fileDescriptor_gitcrow_8b621418de9b2e1a) }

var fileDescriptor_gitcrow_8b621418de9b2e1a = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe5, 0xa4, 0x2d, 0x74, 0x42, 0x2b, 0x75, 0x95, 0x83, 0xeb, 0x46, 0x28, 0x18, 0x21,
	0xa2, 0x20, 0xed, 0x4a, 0x41, 0x48, 0xa8, 0xdc, 0x00, 0x89, 0x1b, 0x07, 0x17, 0x71, 0xe0, 0x12,
	0x6d, 0xdc, 0xa9, 0x59, 0x48, 0x76, 0x96, 0xdd, 0x35, 0x21, 0x57, 0x24, 0x9e, 0xa0, 0xcf, 0x81,
	0xc4, 0xbb, 0xf0, 0x0a, 0x3c, 0x08, 0xb2, 0x77, 0x5b, 0x44, 0x08, 0x94, 0x6b, 0x6f, 0x9e, 0x7f,
	0x7f, 0xff, 0xf3, 0xcd, 0xd8, 0x0b, 0x7b, 0x95, 0xf2, 0xa5, 0xa5, 0x25, 0x37, 0x96, 0x3c, 0xb1,
	0x3d, 0x2f, 0x3f, 0x29, 0xe2, 0x51, 0xcc, 0x06, 0x15, 0x51, 0x35, 0x47, 0x21, 0x8d, 0x12, 0x52,
	0x6b, 0xf2, 0xd2, 0x2b, 0xd2, 0x2e, 0x98, 0xb3, 0xa3, 0x78, 0xda, 0x56, 0xb3, 0xfa, 0x4c, 0xe0,
	0xc2, 0xf8, 0x55, 0x3c, 0xbc, 0xbd, 0x7e, 0xb8, 0xb4, 0xd2, 0x18, 0xb4, 0xf1, 0xe5, 0xfc, 0x0c,
	0xa0, 0x40, 0x43, 0x4e, 0x79, 0xb2, 0x2b, 0xd6, 0x87, 0x6d, 0x5a, 0x6a, 0xb4, 0x69, 0x32, 0x4c,
	0x46, 0xbb, 0x45, 0x28, 0x18, 0x83, 0x2d, 0x8b, 0x86, 0xd2, 0x4e, 0x2b, 0xb6, 0xcf, 0x8c, 0x43,
	0xd7, 0xcb, 0x2a, 0xed, 0x0e, 0x93, 0x51, 0x6f, 0x32, 0xe0, 0xa1, 0x0b, 0xbf, 0xe8, 0xc2, 0x4f,
	0xbc, 0x55, 0xba, 0x7a, 0x2d, 0xe7, 0x35, 0x16, 0x8d, 0x31, 0xff, 0x9a, 0x40, 0xfa, 0x6c, 0x4e,
	0x1a, 0x2f, 0xbb, 0x29, 0x74, 0x05, 0x7e, 0xa8, 0xd1, 0x79, 0x96, 0xc1, 0xcd, 0xda, 0xa1, 0xd5,
	0x72, 0x81, 0xb1, 0xf3, 0x65, 0xcd, 0xee, 0xc0, 0x2d, 0x59, 0x96, 0xe8, 0xdc, 0xd4, 0xd3, 0x7b,
	0xd4, 0x11, 0xa2, 0x17, 0xb4, 0x57, 0x8d, 0xd4, 0x58, 0x8c, 0xa5, 0x77, 0x58, 0xfa, 0x69, 0x1b,
	0xd1, 0x0d, 0x96, 0xa8, 0xbd, 0x6c, 0x52, 0x04, 0x6c, 0x37, 0xd8, 0x2e, 0xdd, 0x1a, 0x76, 0x47,
	0xbd, 0xc9, 0x21, 0xff, 0x6d, 0xc1, 0xfc, 0xd7, 0x0a, 0x8a, 0xe0, 0xcb, 0x1f, 0xc1, 0xe1, 0x06,
	0x5c, 0x67, 0x48, 0x3b, 0x64, 0x29, 0xdc, 0x58, 0xa0, 0x73, 0xb2, 0xc2, 0x88, 0x73, 0x51, 0xe6,
	0xdf, 0x12, 0x38, 0x7a, 0x4e, 0x4b, 0x3d, 0x27, 0x79, 0x7a, 0x4d, 0x26, 0x7d, 0x0c, 0x83, 0xcd,
	0xc4, 0x57, 0x0d, 0x3b, 0x39, 0xef, 0xc0, 0xfe, 0x8b, 0x90, 0x7b, 0x82, 0xf6, 0xa3, 0x2a, 0x91,
	0xad, 0xe0, 0xe0, 0x8f, 0xb5, 0xb1, 0xfb, 0x6b, 0x0c, 0x7f, 0xfb, 0x0f, 0xb2, 0xd1, 0xd5, 0xc6,
	0x00, 0x95, 0x1f, 0x7c, 0xfe, 0xfe, 0xe3, 0xbc, 0xd3, 0xcb, 0x77, 0x44, 0xd9, 0x78, 0x8e, 0x93,
	0x31, 0xfb, 0x92, 0x40, 0x7f, 0xd3, 0x20, 0x6c, 0xbc, 0x96, 0xfa, 0x8f, 0xef, 0x93, 0x3d, 0xf8,
	0x2f, 0x6f, 0x84, 0xe8, 0xb7, 0x10, 0xfb, 0xf9, 0xae, 0x38, 0x8d, 0xb6, 0xe3, 0x64, 0xfc, 0xf4,
	0xde, 0x9b, 0xbb, 0x95, 0xf2, 0x6f, 0xeb, 0x19, 0x2f, 0x69, 0x21, 0xda, 0x38, 0x11, 0xe3, 0x9a,
	0x0b, 0xfc, 0x44, 0x1a, 0x35, 0x35, 0xb3, 0xd9, 0x4e, 0x7b, 0x57, 0x1e, 0xfe, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0x7e, 0x4d, 0xa7, 0x6a, 0xfa, 0x03, 0x00, 0x00,
}

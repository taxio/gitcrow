// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package record

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCacheds(t *testing.T) {
	t.Parallel()

	query := Cacheds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCachedsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCachedsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Cacheds().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCachedsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CachedSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCachedsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CachedExists(ctx, tx, o.PK)
	if err != nil {
		t.Errorf("Unable to check if Cached exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CachedExists to return true, but got false.")
	}
}

func testCachedsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cachedFound, err := FindCached(ctx, tx, o.PK)
	if err != nil {
		t.Error(err)
	}

	if cachedFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCachedsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Cacheds().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCachedsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Cacheds().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCachedsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cachedOne := &Cached{}
	cachedTwo := &Cached{}
	if err = randomize.Struct(seed, cachedOne, cachedDBTypes, false, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}
	if err = randomize.Struct(seed, cachedTwo, cachedDBTypes, false, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cachedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cachedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cacheds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCachedsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cachedOne := &Cached{}
	cachedTwo := &Cached{}
	if err = randomize.Struct(seed, cachedOne, cachedDBTypes, false, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}
	if err = randomize.Struct(seed, cachedTwo, cachedDBTypes, false, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cachedOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cachedTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cachedBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func cachedAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cached) error {
	*o = Cached{}
	return nil
}

func testCachedsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Cached{}
	o := &Cached{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cachedDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Cached object: %s", err)
	}

	AddCachedHook(boil.BeforeInsertHook, cachedBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cachedBeforeInsertHooks = []CachedHook{}

	AddCachedHook(boil.AfterInsertHook, cachedAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cachedAfterInsertHooks = []CachedHook{}

	AddCachedHook(boil.AfterSelectHook, cachedAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cachedAfterSelectHooks = []CachedHook{}

	AddCachedHook(boil.BeforeUpdateHook, cachedBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cachedBeforeUpdateHooks = []CachedHook{}

	AddCachedHook(boil.AfterUpdateHook, cachedAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cachedAfterUpdateHooks = []CachedHook{}

	AddCachedHook(boil.BeforeDeleteHook, cachedBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cachedBeforeDeleteHooks = []CachedHook{}

	AddCachedHook(boil.AfterDeleteHook, cachedAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cachedAfterDeleteHooks = []CachedHook{}

	AddCachedHook(boil.BeforeUpsertHook, cachedBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cachedBeforeUpsertHooks = []CachedHook{}

	AddCachedHook(boil.AfterUpsertHook, cachedAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cachedAfterUpsertHooks = []CachedHook{}
}

func testCachedsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCachedsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cachedColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCachedsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCachedsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CachedSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCachedsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Cacheds().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cachedDBTypes = map[string]string{`PK`: `integer`, `Owner`: `character`, `Repo`: `character`, `Tag`: `character`}
	_             = bytes.MinRead
)

func testCachedsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cachedPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cachedColumns) == len(cachedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCachedsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cachedColumns) == len(cachedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cached{}
	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cachedDBTypes, true, cachedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cachedColumns, cachedPrimaryKeyColumns) {
		fields = cachedColumns
	} else {
		fields = strmangle.SetComplement(
			cachedColumns,
			cachedPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CachedSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCachedsUpsert(t *testing.T) {
	t.Parallel()

	if len(cachedColumns) == len(cachedPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Cached{}
	if err = randomize.Struct(seed, &o, cachedDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cached: %s", err)
	}

	count, err := Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cachedDBTypes, false, cachedPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cached struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cached: %s", err)
	}

	count, err = Cacheds().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
